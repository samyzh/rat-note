(window.webpackJsonp=window.webpackJsonp||[]).push([[394],{1738:function(a,e,t){"use strict";t.r(e);var s=t(19),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"webpack的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack的原理"}},[a._v("#")]),a._v(" webpack的原理")]),a._v(" "),t("ol",[t("li",[a._v("初始化参数：从配置文件和Shell语句中读取和合并参数；")]),a._v(" "),t("li",[a._v("开始编译：用上一步得到的初始化Compiler对象，加载所有配置的插件，执行对象的run的方法开始执行编译；")]),a._v(" "),t("li",[a._v("确定入口：根据配置中的ent ry找到所有的入口文件")]),a._v(" "),t("li",[a._v("编译模块：从入口文件出发，调用所有配置的Loader 对模块进行编译，再找出该模块依赖的模块，在递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),a._v(" "),t("li",[a._v("完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),a._v(" "),t("li",[a._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),a._v(" "),t("li",[a._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])]),a._v(" "),t("h3",{attrs:{id:"babel-原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-原理"}},[a._v("#")]),a._v(" babel 原理")]),a._v(" "),t("p",[a._v("babel的转译过程分为三个阶段："),t("code",[a._v("parsing、transforming、generating")]),a._v("，以ES6代码转译为ES5代码为例，babel转译的具体过程如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("1. ES6代码输入\n2. babylon 进行解析得到 AST\n3. plugin 用 babel-traverse 对 AST 树进行遍历转译,得到新的AST树\n4. 用 babel-generator 通过 AST 树生成 ES5 代码\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h2",{attrs:{id:"参考链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[a._v("#")]),a._v(" 参考链接")]),a._v(" "),t("p",[a._v("https://juejin.cn/post/6844904094281236487")])])}),[],!1,null,null,null);e.default=n.exports}}]);